
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073d  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000691  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  00000fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Slave_begin>:

void slave_Send(uint8_t data8){
    TWDR = data8;
    TWCR = (1<<TWINT) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));
}
  80:	ec eb       	ldi	r30, 0xBC	; 188
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	94 e0       	ldi	r25, 0x04	; 4
  86:	90 83       	st	Z, r25
  88:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  8c:	84 ec       	ldi	r24, 0xC4	; 196
  8e:	80 83       	st	Z, r24
  90:	08 95       	ret

00000092 <Slave_listen>:
  92:	ec eb       	ldi	r30, 0xBC	; 188
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	88 23       	and	r24, r24
  9a:	ec f7       	brge	.-6      	; 0x96 <Slave_listen+0x4>
  9c:	08 95       	ret

0000009e <Slave_Receive>:

uint8_t Slave_Receive(){
      TWCR = (1<< TWINT) | (1<<TWEN);  //LER APENAS 1 BYTE
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      while(!(TWCR & (1 <<TWINT)));
  a4:	ec eb       	ldi	r30, 0xBC	; 188
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 23       	and	r24, r24
  ac:	ec f7       	brge	.-6      	; 0xa8 <Slave_Receive+0xa>
      return TWDR;
  ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b2:	08 95       	ret

000000b4 <main>:
#include <avr/io.h>
#include "SlaveOperationI2C.h"

int main(void){
	DDRB = 0x0F;
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	84 b9       	out	0x04, r24	; 4
    uint8_t Address = 0x10;
    uint8_t Data;
	Slave_begin(Address);
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	0e 94 40 00 	call	0x80	; 0x80 <Slave_begin>
    while(1){
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
  be:	0c eb       	ldi	r16, 0xBC	; 188
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	c4 ec       	ldi	r28, 0xC4	; 196
        Slave_listen();
        Data = Slave_Receive();
		if(Data == 8) PORTB = 0x01;
  c4:	d1 e0       	ldi	r29, 0x01	; 1
	DDRB = 0x0F;
    uint8_t Address = 0x10;
    uint8_t Data;
	Slave_begin(Address);
    while(1){
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
  c6:	f8 01       	movw	r30, r16
  c8:	c0 83       	st	Z, r28
        Slave_listen();
  ca:	0e 94 49 00 	call	0x92	; 0x92 <Slave_listen>
        Data = Slave_Receive();
  ce:	0e 94 4f 00 	call	0x9e	; 0x9e <Slave_Receive>
		if(Data == 8) PORTB = 0x01;
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	11 f4       	brne	.+4      	; 0xda <main+0x26>
  d6:	d5 b9       	out	0x05, r29	; 5
  d8:	f6 cf       	rjmp	.-20     	; 0xc6 <main+0x12>
		else PORTB = 0x00;
  da:	15 b8       	out	0x05, r1	; 5
  dc:	f4 cf       	rjmp	.-24     	; 0xc6 <main+0x12>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
