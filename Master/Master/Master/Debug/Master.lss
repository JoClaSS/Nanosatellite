
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000778  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d3  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Master_begin>:

uint8_t Master_Receive(){
    TWCR = (1<< TWINT) | (1<<TWEN); // lÃª apenas um byte
    while(!(TWCR & 1 <<TWINT));
    return TWDR;
}
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  8c:	08 95       	ret

0000008e <Master_Send>:
  8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  98:	ec eb       	ldi	r30, 0xBC	; 188
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	88 23       	and	r24, r24
  a0:	ec f7       	brge	.-6      	; 0x9c <Master_Send+0xe>
  a2:	08 95       	ret

000000a4 <Master_Start>:
  a4:	84 ea       	ldi	r24, 0xA4	; 164
  a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	ec f7       	brge	.-6      	; 0xae <Master_Start+0xa>
  b4:	08 95       	ret

000000b6 <main>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include "MasterOperationI2C.h"
#include <util/delay.h>
int main(void){
	DDRB = 0x0F;
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	84 b9       	out	0x04, r24	; 4
    uint8_t Address = 0x10;
    uint8_t data = 4;
	Master_begin();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <Master_begin>
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & 1<<TWINT));
}

void Master_Stop(){
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  be:	0c eb       	ldi	r16, 0xBC	; 188
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	d4 e9       	ldi	r29, 0x94	; 148
#define F_CPU 16000000UL
#include <avr/io.h>
#include "MasterOperationI2C.h"
#include <util/delay.h>
int main(void){
  c4:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t Address = 0x10;
    uint8_t data = 4;
	Master_begin();
    while(1){
		for(int i = 0; i<9; i++){
        Master_Start();
  c6:	0e 94 52 00 	call	0xa4	; 0xa4 <Master_Start>
        Master_Send(Address); 
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <Master_Send>
        Master_Send(i);
  d0:	8c 2f       	mov	r24, r28
  d2:	0e 94 47 00 	call	0x8e	; 0x8e <Master_Send>
  d6:	f8 01       	movw	r30, r16
  d8:	d0 83       	st	Z, r29
  da:	cf 5f       	subi	r28, 0xFF	; 255
	DDRB = 0x0F;
    uint8_t Address = 0x10;
    uint8_t data = 4;
	Master_begin();
    while(1){
		for(int i = 0; i<9; i++){
  dc:	c9 30       	cpi	r28, 0x09	; 9
  de:	99 f7       	brne	.-26     	; 0xc6 <main+0x10>
  e0:	f1 cf       	rjmp	.-30     	; 0xc4 <main+0xe>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
